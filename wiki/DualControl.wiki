#labels Dual Control, Split Knowledge, Key Management, Encryption, PAN, PCI

= Dual Control Key Management =

We hereby start the new 2013 "Dual Control" quadrilogy, part of the <a href="http://code.google.com/p/vellum">Enigma Posts</a>.

<h4>Problem overview</h4>

Encryption is great for information security and all that. But the problem with encryption is... key management. An analogy often bandied about is that we lock the door but leave the key in the lock. <i>Or under the mat, but that's my personal favourite so ssh-ssh.</i>

The "Payment Card Industry Data Security Standard" (<a href="http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard">PCI DSS</a>) advocates common sense policies for building a secure network and protecting your data. Actually every enterprise should adopt PCI DSS because it's the only and best such thing we got. Although it focusses on credit card numbers (aka <i>Primary Account Numbers</i>, or PANs), it goes without saying that companies in other industries also have sensitive data that people might want to steal, governments even ;)

<img align=left style="margin-right: 16px" src="http://jroller.com/evanx/resource/Gnome-application-certificate-250-crop.png">

PCI DSS suggests encrypting our critical data-encryption key (DEK) in order to protect it. Fantastic, we now have a "key-encryption key" (KEK) that requires even more protection.

PCI DSS requires that manual key management requires "split knowledge and dual control" of keys, e.g. for key generation and loading. The intent is that no single person can extract the clear-text data. The glaring problem is that sysadmins are a single person, with God-like access to all our data, and de facto custodian of the proverbial keys to the kindgom. <i>Consequently sysadmins have root access ;)</i>

<h4>Solution overview</h4>

We'll split the knowledge of the key password between two admins, so it's known to no single person. Clearly dual control by those two admins is then required to load the key.

We propose keeping at least three copies of the same key in our keystore, where each copy is password-protected by a different "dual password" combination.
Then if one admin is on vacation or otherwise indisposed, that's OK because we only require two admins to be on hand to load the key when restart our app.

<h4><tt>!DualControlGenSecKey</tt></h4>

Step 1 for any data security endeavour is to generate an encryption key, which preferrably not even root can pwn. Whereas <tt>keytool</tt> prompts for a password to be entered by a single admin via the console, we introduce <tt>!DualControlGenSecKey</tt> which will wait for multiple password submissions via SSL.

{{{
public class DualControlGenSecKey {
    ...
    public KeyStore call(VellumProperties properties) throws Exception {
        submissionCount = properties.getInt("dualcontrol.submissions", 3);
        keyAlias = properties.getString("alias");
        keyStoreLocation = properties.getString("keystore");
        keyStoreType = properties.getString("storetype");
        keyAlg = properties.getString("keyalg");
        keySize = properties.getInt("keysize");
        sslContext = DualControlSSLContextFactory.createSSLContext(properties);
        return call();
    }
    
    private KeyStore call() throws Exception {
        String purpose = "new key " + keyAlias;
        Map<String, char[]> dualMap = new DualControlReader().readDualMap(
                purpose, submissionCount, sslContext);
        char[] keyStorePassword = DualControlKeyStoreTools.getKeyStorePassword();
        KeyGenerator keyGenerator = KeyGenerator.getInstance(keyAlg);
        keyGenerator.init(keySize);
        SecretKey secretKey = keyGenerator.generateKey();
        KeyStore keyStore = DualControlKeyStores.loadLocalKeyStore(keyStoreLocation, 
                keyStoreType, keyStorePassword);
        KeyStore.Entry entry = new KeyStore.SecretKeyEntry(secretKey);
        for (String dualAlias : dualMap.keySet()) {
            char[] dualPassword = dualMap.get(dualAlias);
            String alias = keyAlias + "-" + dualAlias;
            KeyStore.ProtectionParameter prot = 
                    new KeyStore.PasswordProtection(dualPassword);
            keyStore.setEntry(alias, entry, prot);
        }
        keyStore.store(new FileOutputStream(keyStoreLocation), keyStorePassword);
        return keyStore;
    }
}
}}}
where <tt>!DualControlReader</tt> provides a map of "dual aliases" and their concatenated "dual passwords." For each duo, we programmatically create a <tt>!KeyStore</tt> entry containing the same key, but protected by a different password, known to no single person.

<h4>Demo</h4>

So let's test <tt>!DualControlGenSecKey</tt>.

{{{
  java -Ddualcontrol.submissions=3 -Ddualcontrol.minPasswordLength=18 \
     -Dkeystore=$keystore -Dstoretype=JCEKS -Dstorepass=$storepass \
     -Dalias=dek2013 -Dkeyalg=AES -Dkeysize=256 \
     dualcontrol.DualControlGenSecKey
}}}

where we use a <tt>JCEKS</tt>-type keystore for our symmetric secret key, which is specified as 256bit AES, and "dek2013" is the alias to reference this key.  

For example, three admins submit their passwords via SSL sockets where their client cert's <tt>CN</tt> identifies them as <tt>evanx</tt>, <tt>henty</tt> and <tt>brent</tt>. We see that <tt>!DualControlGenSecKey</tt> creates secret key entries under the following "dual aliases."

{{{
$ keytool -keystore $keystore -storetype JCEKS -storepass $storepass -list | grep Entry
dek2013-brent-henty, 18 Aug 2013, SecretKeyEntry, 
dek2013-evanx-henty, 18 Aug 2013, SecretKeyEntry, 
dek2013-brent-evanx, 18 Aug 2013, SecretKeyEntry,
}}}

Actually these three keys are one and the same! However each copy has a different key password, which is actually a combination of a pair of personal passwords, which we call a "dual password."

<h4><tt>!DualControlConsole</tt></h4>

Let's write an app for admins to submit their passwords via SSL.

{{{
public class DualControlConsole {
    final static int PORT = 4444;
    final static String HOST = "127.0.0.1";

    public static void main(String[] args) throws Exception {
        Socket socket = DualControlSSLContextFactory.createSSLContext(
                VellumProperties.systemProperties).getSocketFactory().
                createSocket(HOST, PORT);
        DataInputStream dis = new DataInputStream(socket.getInputStream());
        String purpose = dis.readUTF();
        char[] password = System.console().readPassword(
                "Enter password for " + purpose + ": ");
        String invalidMessage = new DualControlPasswordVerifier(
                VellumProperties.systemProperties).getInvalidMessage(password);
        if (invalidMessage != null) {
            System.err.println(invalidMessage);
        } else {
            String hash = Digests.sha1String(Chars.getBytes(password));
            Arrays.fill(password, (char) 0);
            password = System.console().readPassword(
                    "Re-enter password for " + purpose + ": ");
            if (!Digests.sha1String(Chars.getBytes(password)).equals(hash)) {
                System.err.println("Passwords don't match.");
            } else {
                DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                writeChars(dos, password);
                String message = dis.readUTF();
                System.console().writer().println(message);
            }
            Arrays.fill(password, (char) 0);
        }
        socket.close();        
    }
    ...
}
}}}
where we open an SSL socket to our supposed dual-controlled app listening on port 4444 on <tt>localhost</tt> e.g. port forwarded using <tt>ssh</tt>, and are authenticated and identified via our SSL cert, woohoo!

{{{
evanx@beethoven:~$ java -Ddualcontrol.ssl.keyStore=evanx.jks dualcontrol.DualControlConsole
Enter password for dual control SSL connection:
Enter password for new key dek2013: 
Re-enter password: 
OK evanx
}}}

where <tt>DualControlSSLContextFactory</tt> will prompt for the SSL keystore password first.

<img align="right" src="http://jroller.com/evanx/resource/Gnome-preferences-desktop-personal-250-crop.png"/>

A known "bug" is that more Godly sysadmins can socially-engineer other less Godly admins to submit their passwords whilst a malicious socket server has been installed by the most Godly one onto that frikking port! Other naughty tricks that come to mind is the creation of phantom admins, or the impersonation of other admins e.g. during a key generation procedure, by exploiting <i>root</i> access to SSL keystores. Perhaps you can propose some measures to improve admins' level of confidence that they are not having the wool pulled over their eyes? 

The workaround for such "bugs" in plain management-speak is that our "controls" as documented in our "policies and procedures" detect such attacks and dictate the immediate inauguration of appropriate remediation measures. <i>Yeah baby!</i>

On a positive note, we can setup "<i>double</i>-two-factor" authentication whereby the client requires a password-protected <tt>ssh</tt> key for port forwarding, and a password-protected <tt>!KeyStore</tt> for the client-authenticated SSL connection. For both the underlying <tt>ssh</tt> access, and the <tt>SSL</tt> connection over that, the admin needs to <i>have</i> the private key, and <i>know</i> the password that is protecting it, and so both require <a href="http://en.wikipedia.org/wiki/Multi-factor_authentication">multi-factor authentication</a>. 

<h4>Password complexity vs length</h4>

We ensure that the default required complexity and/or length of the password is sufficient to counter brute-force attacks.

{{{
public class DualControlPasswordVerifier {
    final boolean verifyPasswordComplexity;
    final int minPasswordLength;
    final int minWordCount;

    public DualControlPasswordVerifier(VellumProperties properties) {
        verifyPasswordComplexity = properties.getBoolean(
                "dualcontrol.verifyPasswordComplexity", true);
        minPasswordLength = properties.getInt(
                "dualcontrol.minPasswordLength", 18);
        minWordCount = properties.getInt(
                "dualcontrol.minWordCount", 7);
    }
    
    public String getInvalidMessage(char[] password) throws Exception {
        if (password.length < minPasswordLength) {
            return "Password too short";
        }
        if (countWords(password) < minWordCount) {
            return "Too few words in passphrase";
        }
        if (verifyPasswordComplexity) {
            if (!containsLetter(password) || !containsUpperCase(password) || 
                    !containsLowerCase(password) || !containsDigit(password) || 
                    !containsPunctuation(password)) {
                return "Insufficient password complexity";
            }
        }
        return null;
    }
    ...
}
}}}

We argue that password length is more practical than complexity, e.g. that a passphrase of 10 lowercase letters and spaces, is preferrable to an 8 character password with uppercase, lowercase and digits.

Importantly, passphrases are easier to remember, so we don't have to write them down and stick them on our monitor. Consequently, we might choose not to enforce password complexity, but rather require longer passphrases. However PCI DSS mandates alphanumeric passwords, and <a href="http://en.wikipedia.org/wiki/Sarbanes%E2%80%93Oxley_Act">SOX</a> says uppercase and lowercase, and we gotta cover all dem bases.

<h4>Brutish Key Protector</h4>

Our keystore is unfortunately forever vulnerable to theft and/or brute-force attacks. Even when we have deleted it, someone else might have ill-gotten it earlier. On the upside, we might assume that the data is no longer of any value to anyone after say 30 years.

We observe that an Intel i5 can manage about 30 guesses per millisecond on a JCE keystore, using 4 threads to utilise its quad-cores.

{{{
evanx@beethoven:~$ java dualcontrol.JCEKSBruteForceTimer 4 1000000 \
  $seckeystore $pass dek2013-evanx-henty eeeehhhh

threads 4, count 1000000, time 128s, avg 0.032ms
31 guesses per millisecond
}}}

<img align="right" style="margin-left: 4px" src="http://jroller.com/evanx/resource/gnome-shield-250.png" />

If we fear that in the future someone can try an average of 1000 guesses per millisecond on a botnet of a 50M machines, then by my backroom calculations, 41 years are required to try a quarter of all possible passwords up to 18 characters in length using a lazy subset of only 20 characters. 

{{{
$ bc
guess=1000
mach=50
20^18/(365*24*3600*1000*guess*mach*1000*1000)/4
41
}}}

However, if we assume some combination of the 2000 most common words is used for a passphrase, then 18 characters is not enough, <i>D'oh!</i>

We note that our desired minimum length applies to each admin's passphrase, so as to protect against a rogue admin perpetrating the brute-force attack on the other half of the dual password.

A follow-up article will discuss this further, and conclude that we might want an even stronger <tt>!KeyStore</tt> implementation than JCEKS, in particular with a stronger <tt>!KeyProtector</tt> using <tt>PBKDF2</tt> or even <tt>scrypt</tt>, with a large number of iterations e.g. 500k, so that it takes a few seconds to load the key i.e. a quite tolerable startup delay.

<h4><tt>DualControlSSLContextFactory</tt></h4>

Similarly to the standard <tt>-Dnet.javax.ssl.keyStore</tt> <i>et al</i> command-line options to override the default "keyStore" and "trustStore" for SSL sockets, we use <tt>-Ddualcontrol.ssl.keyStore</tt> and what-not.

These are used to create an <tt>SSLContext</tt>, in particular for opening an <tt>SSLSocket</tt> in <tt>!DualControlConsole</tt>, and for creating an <tt>SSLServerSocket</tt> in <tt>!DualControlReader</tt>.

{{{
public class DualControlSSLContextFactory {    

    public static SSLContext createSSLContext(VellumProperties properties) throws Exception {
        String keyStoreLocation = properties.getString("dualcontrol.ssl.keyStore");
        if (keyStoreLocation == null) {
            throw new Exception("Missing -D property: dualcontrol.ssl.keyStore");
        }
        char[] keyStorePassword = properties.getPassword("dualcontrol.ssl.keyStorePassword", null);
        if (keyStorePassword == null) {
            keyStorePassword = System.console().readPassword(
                    "Enter passphrase for dual control SSL connection: ");
        }
        char[] keyPassword = properties.getPassword("dualcontrol.ssl.keyPassword", 
                keyStorePassword);
        String trustStoreLocation =
                properties.getString("dualcontrol.ssl.trustStore", keyStoreLocation);
        char[] trustStorePassword =
                properties.getPassword("dualcontrol.ssl.trustStorePassword", keyStorePassword);
        SSLContext sslContext = createSSLContext(keyStoreLocation, keyStorePassword,
                keyPassword, trustStoreLocation, trustStorePassword);
        Arrays.fill(keyStorePassword, (char) 0);
        Arrays.fill(keyPassword, (char) 0);
        Arrays.fill(trustStorePassword, (char) 0);
        return sslContext;
    }
    ...
}
}}}

where passwords can specified on the command-line e.g. for test scripts, but otherwise we prompt for the SSL keystore password to be entered on the console.

<img align=right style="margin-right: 16px" src="http://jroller.com/evanx/resource/Gnome-application-certificate-250-crop.png">

Note that the <tt>-Ddualcontrol.ssl.keyStore</tt> property is the location of our "private keystore" which contains the <i>private</i> key and its certificate, used for SSL e.g. for RSA or DSA assymmetric encryption. This should not be confused with our "secret keystore" which contains an AES or DESede <i>secret</i> key for symmetric encryption of our data.

As illustrated above, we invariably use <tt>char</tt> arrays for passwords, and clear these as soon as possible. <tt>String</tt>'s are immutable and will be garbage-collected and overwritten in memory at some stage, but that is too indeterminate to alleviate our paranoia. Having said that, <tt>!SecretKeySpec</tt> and friends clone byte arrays like there's no tomorrow, d'oh! So we gotta somehow ensure no one can "debug" our memory!?

<h4><tt>!DualControlReader</tt></h4>

We observe the following logs when testing <tt>!DualControlGenSecKey</tt>.
{{{
INFO [DualControlReader] readDualMap submissionCount: 3
INFO [DualControlReader] readDualMap purpose: new key dek2013
INFO [DualControlReader] readMap SSL port 4444
INFO [DualControlReader] Received evanx
INFO [DualControlReader] Received henty
INFO [DualControlReader] Received brent
INFO [DualControlReader] readDualMap dualAlias: brent-evanx
INFO [DualControlReader] readDualMap dualAlias: brent-henty
INFO [DualControlReader] readDualMap dualAlias: evanx-henty
}}}

So our <tt>!DualControlReader</tt> utility class handles reading split knowledge submissions.

{{{
public class DualControlReader {
    ...
    String purpose;
    int submissionCount;
    SSLContext sslContext;
    Set<String> names = new TreeSet();

    public DualControlReader(SSLContext sslContext) {
        this.sslContext = sslContext;
    }

    public Map<String, char[]> readDualMap(String purpose, int submissionCount,
            SSLContext sslContext) throws Exception {
        this.purpose = purpose;
        this.submissionCount = submissionCount;
        this.sslContext = sslContext;
        logger.info("readDualMap submissionCount: " + submissionCount);
        logger.info("readDualMap purpose: " + purpose);
        Map<String, char[]> map = new TreeMap();
        Map<String, char[]> submissions = readMap();
        for (String name : submissions.keySet()) {
            for (String otherName : submissions.keySet()) {
                if (name.compareTo(otherName) < 0) {
                    String dualAlias = String.format("%s-%s", name, otherName);
                    char[] dualPassword = combineDualPassword(
                            submissions.get(name), submissions.get(otherName));
                    map.put(dualAlias, dualPassword);
                    logger.info("readDualMap dualAlias: " + dualAlias);
                }
            }
        }
        return map;
    }
    ...
}}}

The <tt>compareTo()</tt> in the nested loop above ensures that we exclude the alphabetically-challenged <tt>evanx-brent</tt> in favour of <tt>brent-evanx</tt>, and the likes of <tt>evanx-evanx</tt>, which is just silly.

We invoke <tt>readMap()</tt> to listen for submissions via an <tt>SSLServerSocket</tt>.

{{{
    private final static int PORT = 4444;
    private final static String HOST = "127.0.0.1";
    private final static String REMOTE_ADDRESS = "127.0.0.1";
    ...
    private Map<String, char[]> readMap() throws Exception {
        logger.info("readMap SSL port " + PORT);
        SSLServerSocket serverSocket = (SSLServerSocket) sslContext.
                getServerSocketFactory().createServerSocket(PORT, submissionCount,
                InetAddress.getByName(HOST));
        serverSocket.setNeedClientAuth(true);
        return readMap(serverSocket);
    }
}}}

where we have hard-wired the <tt>SSLServerSocket</tt> to <tt>localhost</tt> i.e. via the loopback interface. Therefore <tt>!DualControlConsole</tt> must be invoked either in a local <tt>ssh</tt> session, or a remote session using <tt>ssh</tt> port forwarding.

We accumulate the required number of submissions in a loop.

{{{    
    private Map<String, char[]> readMap(SSLServerSocket serverSocket) throws Exception {
        Map<String, char[]> map = new TreeMap();
        while (map.size() < submissionCount) {
            SSLSocket socket = (SSLSocket) serverSocket.accept();
            if (!socket.getInetAddress().getHostAddress().equals(REMOTE_ADDRESS)) {
                throw new Exception("Invalid remote address "
                        + socket.getInetAddress().getHostAddress());
            } else {
                String name = new X500Name(socket.getSession().getPeerPrincipal().
                        getName()).getCommonName();
                names.add(name);
                if (names.contains(name)) {
                    throw new Exception("Duplicate submission from " + name);
                } else {
                    DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                    dos.writeUTF(purpose);
                    DataInputStream dis = new DataInputStream(socket.getInputStream());
                    char[] password = readChars(dis);
                    String responseMessage = "Received " + name;
                    String invalidMessage = new DualControlPasswordVerifier(
                            VellumProperties.systemProperties).getInvalidMessage(password);
                    if (invalidMessage != null) {
                        throw new Exception(responseMessage + ": " + invalidMessage);
                    }
                    map.put(name, password);
                    if (true) {
                        responseMessage += " " + new Base32().encodeAsString(
                                Digests.sha1(Chars.getAsciiBytes(password)));
                    }
                    dos.writeUTF(responseMessage);
                    logger.info(responseMessage);
                }
            }
            socket.close();
        }
        serverSocket.close();
        return map;
    }
}}}

where the admin's username is determined from their SSL cert, in particular the <tt>CN</tt> field.

<h4><tt>!DualControlDemoApp</tt></h4>

On the downside, we have to re-engineer our application to be dual-controlled, in order to load the key it so desperately needs to cipher our data.

{{{
public class DualControlDemoApp {
    private SecretKey dek;     
    ...
    public void loadKey(String keyStoreLocation, char[] keyStorePass, String alias) 
            throws Exception {
        dek = DualControlSessions.loadKey(keyStoreLocation, keyStorePass, alias,
                "DualControlDemoApp");
        logger.info("Loaded key " + alias + " alg " + dek.getAlgorithm());
    }
}
}}}

The application loads keys as if it's too easy. But the caveat is that execution is blocked whilst we are waiting on the <tt>SSLServerSocket</tt> for two admins to submit their passwords using <tt>!DualControlConsole</tt>'s.

{{{
$ java dualcontrol.DualControlDemoApp seckeystore.jceks test1234 dek2013
INFO [DualControlDemoApp] main invoked with args: [seckeystore.jceks, test1234, dek2013]
INFO [DualControlReader] readDualMap submissionCount: 2
INFO [DualControlReader] readDualMap purpose: key dek2013 for DualControlDemoApp
INFO [DualControlReader] readMap SSL port 4444
INFO [DualControlReader] Received evanx
INFO [DualControlReader] Received henty
INFO [DualControlReader] readDualMap dualAlias: evanx-henty
INFO [DualControlSessions] dek2013-evanx-henty
INFO [DualControlDemoApp] Loaded key dek2013 alg AES
}}}

where the two <tt>!DualControlConsole</tt> sessions are as follows. 

{{{
$ java -Ddualcontrol.ssl.keyStore=evanx.jks dualcontrol.DualControlConsole
Enter passphrase for dual control SSL connection: 
Enter password for key dek2013 for DualControlDemoApp: 
Re-enter password for key dek2013 for DualControlDemoApp: 
OK evanx WLCO4XPIFBTNWOHXTRWUVENGEZEGW4HJ
}}}

{{{
$ java -Ddualcontrol.ssl.keyStore=henty.jks dualcontrol.DualControlConsole
Enter passphrase for dual control SSL connection: 
Enter password for key dek2013 for DualControlDemoApp: 
Re-enter password for key dek2013 for DualControlDemoApp: 
OK henty 6QLBNC26WGS34AILXPBSP2V65B3N5CYF
}}}

where the response message includes a hash of the submitted password so we might recognise its correctness or correctability.

<h4><tt>!DualControlSessions</tt></h4>

Our app above invokes the <tt>loadKey()</tt> method below to do the legwork. 

{{{
public class DualControlSessions {

    public static SecretKey loadKey(String keyStoreLocation, char[] keyStorePass, 
            String alias, String purpose) throws Exception {
        char[] dualPass = null;
        try {
            KeyStore dualKeyStore = 
                    DualControlKeyStores.loadKeyStore(keyStoreLocation, keyStorePass);
            Map.Entry<String, char[]> entry = DualControlReader.readDualEntry(
                "key " + alias + " for " + purpose);
            String dualAlias = entry.getKey();
            dualPass = entry.getValue();
            alias = alias + "-" + dualAlias;
            return (SecretKey) dualKeyStore.getKey(alias, dualPass);
        } finally {
            if (dualPass != null) {
                Arrays.fill(dualPass, (char) 0);            
            }
        }        
    }
}
}}}

where we read the dual info using the aforementioned <tt>!DualControlReader</tt> which creates an <tt>SSLServerSocket</tt> on a well-known port e.g. 4444.

<h4>Crypto server</h4>

We might wish to create a central crypto server which is dual-controlled, rather than burden our app. In this case, we can restart our application without dual control, and indeed have any number of apps using this server. This simplifies key management, and enables us to isolate our keys to improve security.

We'll implement the crypto server in a subsequent article. <i>Then we can say, "Dual control? We have an app for that." ;)</i>

<h4>Conclusion</h4>

The problem with encryption is secure key management. We shouldn't leave the key under the mat.

PCI requires that "split knowledge and dual control" be used to protect our data-encryption key so that no single person can extract the data in clear-text, not even our most trustworthy employee today, rogue tomorrow.

We present a <tt>!DualControlGenSecKey</tt> utility for generating secret keys that are really secret. We protect the data-encryption keys using password-based encryption, courtesy of <tt>JCEKeyStore</tt>. We enable split knowledge of the key password, which is effectively a key-encryption key, between two admins. Thereby dual control is required to load the key.

We propose keeping at least three copies of the same key, but where each copy is password-protected by a different pair of admins. Then if one admin is on vacation or otherwise indisposed, that's OK because we only require two admins to load a copy of the key when we restart our app.

<img align="right" style="margin-left: 4px" src="http://jroller.com/evanx/resource/gnome-keys-250.png" />

We present a <tt>!DualControlConsole</tt> utility for admins to submit their password remotely via SSL from an <tt>ssh</tt> terminal session, to our dual-controlled app.

<h4>See also</h4>

In "Dual Control Revoke and Enroll" we will present other tools similar to <tt>!DualControlGenSec</tt>, namely <tt>!DualControlRevoke</tt> and <tt>!DualControlEnroll</tt> to manage admin staff reshuffles - preview <a href="https://code.google.com/p/vellum/source/browse/trunk/src/dualcontrol/DualControlEnroll.java"><tt>!DualControlEnroll.java</tt></a> and <a href="https://code.google.com/p/vellum/source/browse/trunk/src/dualcontrol/DualControlRevoke.java"><tt>!DualControlRevoke.java</tt></a>

In "Dual Control Crypto Server" we implement a dual-controlled crypto server to unburden our apps, simplify key management and enhance security - preview <a href="https://code.google.com/p/vellum/source/browse/trunk/src/dualcontrol/CryptoServer.java"><tt>!CryptoServer.java</tt></a> and its <a href="https://code.google.com/p/vellum/source/browse/trunk/src/dualcontrol/CryptoHandler.java"><tt>!CryptoHandler.java</tt></a>

In "Dual Control Key Protection" we address increased protection against brute-force password attacks e.g. via PBE of the keystore using <tt>PBKDF2</tt> with a high number of iterations, so that the key takes a second or two to recover, rather than half a millisecond - preview <a href="https://code.google.com/p/vellum/source/browse/trunk/src/dualcontrol/JCEKSBruteForceTimer.java"><tt>JCEKSBruteForceTimer.java</tt></a> and <a href="https://code.google.com/p/vellum/source/browse/trunk/src/dualcontrol/RecryptedKeyStores.java"><tt>!RecryptedKeyStores.java</tt></a>.

In "Dual Control Key Rotation" we'll address periodic key revision e.g. migrating from a old "dek2013" key a to revised "dek2014" key.

You can browse the code for this exercise at <a href="http://code.google.com/p/vellum">code.google.com/vellum</a> in the <a href="https://code.google.com/p/vellum/source/browse/#svn%2Ftrunk%2Fsrc%2Fdualcontrol"> <tt>dualcontrol</tt></a> package.

<tt><a href="https://twitter.com/evanxsummers" class="twitter-follow-button" data-show-count="false">@evanxsummers</a></tt>
