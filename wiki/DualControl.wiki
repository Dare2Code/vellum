
= DualControl =

== Introduction ==

i think i've solved the dual control for PCI compliance in the simplest possible way, including keytool management functions e.g. key rotation, etc - by invoking keytool once password combinations have been gathered e.g. from 3 admins

the code is online as follows - and cut and pasted further below for your review :)

https://code.google.com/p/vellum/source/browse/#svn%2Ftrunk%2Fsrc%2Fdualcontrol

it's 20 odd lines of util code in DualControl that enables it - these are used by <tt>!DualControlKeyTool</tt> invocator (of KeyTool, to effectively add dual control to keytool in terms of combinations of key passwords), and of course by our application to get two admins to provide together a key password which can be used to load DEK from java keystore

rather than using HTTPS, i just using raw SSL sockets e.g. there is <tt>!DualControlClient</tt> which is just minimal SSL client socket for sending username and password to <tt>!DualControlKeyTool</tt>, or our application, or <tt>!CryptoServer</tt> - a remote key management server !

the DEK-containing keystore can be on the app server, or on a crypto server running on different VM e.g. outside DMZ), and in fact the keystore can be trivially loaded remotely via SSL into the app, or the remote crypto server 

so one could have an application server which doesn't do encryption, talking to a crypto server in another VM, which doesn't store the keys, which loads the keystore from a keystore file server on yet another VM - or one can could store keys and cipher all in the app server, but still with dual control - so quite flexible :)

all comms are via client-auth SSL and using raw sockets as i said, and the protocol mininal e.g. "usere:userepasswd" or "powerstate-2013:ENCRYPT:1111222233334444" - and the in case of the remote keystore file server it just "netcats" the keystore in response to an empty request 

disclaimer: the code below does things like logging and System.err of secrets as still in debug mode :)

== !DualControl ==

<pre>
</pre>

== !DualControlContext ==

<pre>
</pre>

== !DualControlClient ==

<pre>
</pre>

== !DualControlKeyTool ==

<pre>
</pre>

== !AppDemo == 

<pre>
</pre>

== !FileServer ==

for storing the keystore remotely and loading via SSL 

<pre>
</pre>

== !FileClientDemo == 

example loading remote KeyStore from <tt>!FileServer</tt>

<pre>
</pre>

== !CryptoServer ==

<pre>
</pre>

== !CryptoClient ==

here test script which simulates the key gen using 3 admins submitting their "half-passwords" to save three copies of the key that is generated by invoking <tt>!KeyTool</tt> for each case 

this script also exercises <tt>!AppDemo</tt> (requiring dual control of two admins when starting), FileServer/FileClient (for remote keystore loading), and <tt>!CryptoServer</tt> which does remote ciphering, and requires dual control to start as well of course :)

<pre>
set -u

set -x

secstore=~/tmp/dual.sec.jceks
secalias=dek-2013
privatestore=~/tmp/dual.private.jks
truststore=~/tmp/dual.public.jks
cert=~/tmp/dual.pem
pass=test1234

javaks() {
  java \
    -Djavax.net.ssl.keyStore=$privatestore \
    -Djavax.net.ssl.keyStorePassword=$pass \
    -Djavax.net.ssl.keyPassword=$pass \
    -Djavax.net.ssl.trustStore=$truststore \
    -Djavax.net.ssl.trustStorePassword=$pass \
    $@
}

nc3() {
    sleep 1 
    echo "usere:eeee" | nc -v localhost 4444
    echo "userh:hhhh" | nc -v localhost 4444
    echo "userb:bbb" | nc -v localhost 4444
}

nc2() {
    sleep 1 
    echo "usere:eeee" | nc -v localhost 4444
    echo "userh:hhhh" | nc -v localhost 4444
}

jc() {
  javaks dualcontrol.DualControlClient "$1"
}

jc1() {
    sleep 1 
    jc "usere:eeee" 
}

jc2() {
    sleep 1 
    jc "usere:eeee" 
    jc "userh:hhhh"
}

jc3() {
    sleep 1 
    jc "usere:eeee" 
    jc "userh:hhhh"
    jc "userb:bbbb"
}
 
initks() {
  dualalias="dualserver"
  dname="CN=server, OU=dualcontrol, O=test, L=ct, S=wp, C=za"
  rm -f $privatestore
  rm -f $truststore
  rm -f $secstore
  keytool -keystore $privatestore -storepass "$pass" -keypass "$pass" -alias "$dualalias" -genkeypair -dname "$dname"
  keytool -keystore $privatestore -storepass "$pass" -list | grep Entry
  keytool -keystore $privatestore -storepass "$pass" -keypass "$pass" -alias "$dualalias" -exportcert -rfc | 
    openssl x509 -text | grep "Subject:"
  keytool -keystore $privatestore -storepass "$pass" -keypass "$pass" -alias "$dualalias" -exportcert -rfc > $cert
  keytool -keystore $truststore -storepass "$pass" -alias "$dualalias" -importcert -noprompt -file $cert
  keytool -keystore $truststore -storepass "$pass" -list | grep Entry
}

command1_genseckey() {
  javaks -DDualControl.alias=$1 -DDualControl.inputs=3 dualcontrol.DualControlKeyTool \
     -keystore $secstore -storetype JCEKS -storepass $pass -genseckey -keyalg DESede
  keytool -keystore $secstore -storetype JCEKS -storepass $pass -list
}

command0_app() {
  javaks -DDualControl.inputs=2 dualcontrol.TestApp $secstore $pass $secalias
}

command0_keystoreserver() {
  javaks dualcontrol.FileServer 127.0.0.1 4445 1 1 127.0.0.1 $secstore
}

keystoreclient() {
  sleep 1
  javaks dualcontrol.FileClient 127.0.0.1 4445
}

command0_testkeystoreserver() {
  keystoreclient & command0_keystoreserver
  sleep 2
}

command0_cryptoserver() {
  javaks dualcontrol.CryptoServer 127.0.0.1 4446 1 2 127.0.0.1 $secstore $pass
}

cryptoclient() {
  sleep 1
  jc "usere:eeee" 
  jc "userh:hhhh"
  sleep 1
  data=`javaks dualcontrol.CryptoClient 127.0.0.1 4446 "$secalias:DESede/CBC/PKCS5Padding:ENCRYPT:pq7ZjIcIK9A=:111122223333444"`
  javaks dualcontrol.CryptoClient 127.0.0.1 4446 "$secalias:DESede/CBC/PKCS5Padding:DECRYPT:$data"
}

command0_testcryptoserver() {
  cryptoclient & command0_cryptoserver
  sleep 2
}

command0_testgenseckey() {
  initks 
  jc3 | command1_genseckey $secalias
  sleep 2
  if ! nc -z localhost 4444
  then
    jc2 | command0_app
    sleep 2
  fi
}

command0_client() {
  javaks dualcontrol.DualControlClient
}

command0_testgenseckey
command0_testkeystoreserver
command0_testcryptoserver
command0_client
</pre>

and here output from the above script just to prove it does work ;)

<pre>
</pre>