
December 2012 - DRAFT

This is part of the [EnigmaPosts Enigma Posts] series. 

This provides a long overdue update to [PasswordHash Password Hash] (2007) from the [EnigmaPrequels Enigma Prequels] series, where that article neglected to add salt, which is soooo embarassing for whoever wrote that article... which was unfortunately me.

<h4>Introduction</h4>

It goes without saying how vital passwords are to IT security. Which itself goes a long way towards explaining why IT security often seems to break down in such <a href="http://www.dailymail.co.uk/news/article-2123854/1-5million-account-numbers-hacked-Visa-Mastercard-card-data-theft.html">spectacular fashion</a>. 

The most secure passwords, are no passwords, e.g. using Google Login, Facebook Connect, Mozilla Persona or some such provider. Such an approach simplifies registration, and is the way forward for consumer sites. However for internal enterprise apps, those might not be suitable. Perhaps the reader can recommend an opensource identity solution which one can use to handle passwords et al, in a PCI-compliant fashion? 

Having said that, this article discusses DIY password management for our apps. 

We know that passwords should never be seen in clear text, or stored as-is in databases; but rather they should be hashed in an irretrievable manner. 

Traditionally <a href="http://en.wikipedia.org/wiki/MD5">MD5</a> has been used, and <a href="http://en.wikipedia.org/wiki/SHA-2">SHA-2</a> is recommended these days for general hashing. But we'll read that we should use computationally expensive algorithms for password hashing, so that the passwords are harder to crack.

We aren't suprised to read that the <a href="http://www.dailymail.co.uk/sciencetech/article-2223197/Revealed-The-common-passwords-used-online-year-password-STILL-tops-list.html">most common</a> password is "password", followed by other premium choices such as "12345678" and "abc123" etc. This in fact illustrates the importance of salt :)

<h4>Background reading</h4>

(Please note i have sometimes edited and paraphrased the sources for brevity, with the exception of the first quote from OWASP.)

http://en.wikipedia.org/wiki/SHA-2

<blockquote>
SHA-2 is a set of cryptographic hash functions (SHA-224, SHA-256, SHA-384, SHA-512) designed by the National Security Agency (NSA) and published in 2001 by the NIST as a U.S. Federal Information Processing Standard.
</blockquote>

https://www.owasp.org/index.php/Hashing_Java

<blockquote>
If each password is simply hashed, identical passwords will have the same hash. This has two drawbacks:

Due to the birthday paradox (http://en.wikipedia.org/wiki/Birthday_paradox), the attacker can find a password very quickly especially if the number of passwords the database is large.

An attacker can use a list of precomputed hashes (http://en.wikipedia.org/wiki/Rainbow_table) to break passwords in seconds.

In order to solve these problems, a salt can be concatenated to the password before the digest operation.

A salt is a random number of a fixed length. This salt must be different for each stored entry. It must be stored as clear text next to the hashed password.

In this configuration, an attacker must handle a brute force attack on each individual password. The database is now birthday attack and rainbow crack resistant.
</blockquote>

https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet

<blockquote>
General hashing algorithms (eg, MD5, SHA-1/256/512) are not recommended for password storage. Instead an algorithm specifically designed for the purpose should be used such as bcrypt, PBKDF2 or scrypt.
</blockquote>

http://en.wikipedia.org/wiki/Bcrypt

<blockquote>
bcrypt is a key derivation function for passwords based on the Blowfish cipher.
</blockquote>

http://en.wikipedia.org/wiki/PBKDF2

<blockquote>
PBKDF2 (Password-Based Key Derivation Function 2) is a key derivation function that is part of RSA Laboratories' Public-Key Cryptography Standards (PKCS) series.

PBKDF2 applies a pseudorandom function to the input password along with a salt value, and repeats the process many times. 

The added computational work makes password cracking much more difficult.

Having a salt added to the password reduces the ability to use precomputed hashes (rainbow tables) for attacks.
</blockquote>

http://en.wikipedia.org/wiki/Scrypt

<blockquote>
A password-based key derivation function (password-based KDF) is generally designed to be computationally intensive, so that it takes a relatively long time to compute (say on the order of several hundred milliseconds). 

Legitimate users only need to perform the function once per operation (e.g., authentication), and so the time required is negligible. 

However, a brute force attack would likely need to perform the operation billions of times at which point the time requirements become significant and, ideally, prohibitive.
</blockquote>

<h4>Base64</h4>

Since we will be saving password hashes and their salt in our database (i.e. in a table for user logins), we must encode bytes into text. We will use <a href="http://en.wikipedia.org/wiki/Base64">Base64</a>.

For convenience, we introduce methods which delegate to our Base64 codec of choice e.g. from Apache commons, or the built-in Sun one, or some such.
{{{
public class Base64 {
    
    public static String encode(byte[] bytes) {
        return new BASE64Encoder().encode(bytes);
    }

    public static byte[] decode(String string) {
        try {
            return new BASE64Decoder().decodeBuffer(string);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
}}}

<h4>Psuedo salt</h4>

We use <tt>!SecureRandom</tt> to produce our salt.
{{{
public class PasswordSalts {
    public static final int SALT_LENGTH = 16;    
    
    public static byte[] nextSalt() {
        byte[] salt = new byte[SALT_LENGTH];
        SecureRandom random = new SecureRandom();
        random.nextBytes(salt);
        return salt;
    }    
}
}}}
where our salt is a 16 byte random number. Sooo easy :)

First let's have a closer look at the encoded salt.
{{{
    @Test
    public void testSaltEncoding() throws Exception {
        byte[] saltBytes = Passwords.nextSalt();
        String salt = Passwords.encode(saltBytes);
        System.out.println(salt);
        assertEquals(salt.length(), 24);
        assertEquals(salt.substring(22, 24), "==");
    }
}}}

{{{
r2tWqOrfKpr64rpOwoRlcw==
}}}

So apparently a 16 byte array encoded with Base64 yields a 22 character string followed by two characters of padding. 

<h4>Per user salt</h4>

When the user chooses a password, we generate some salt, hash the password using the salt, and save the salt and hash in a record for that user login in our database. 

The [https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet OWASP example] has a SQL credential table with the columns:
<li> LOGIN VARCHAR (100) PRIMARY KEY,
<li> PASSWORD VARCHAR (32),
<li> SALT VARCHAR (32)

<h4>Crypto parameters</h4>

So let's try PBKDF2. (We'll leave Bcrypt and Scrypt for another day. Readers, please provide your opinions on these other options, and indeed PBKDF2 and parameters and what-not presented here.)

{{{
public class Passwords {
    public static final String ALGORITHM = "PBKDF2WithHmacSHA1";
    public static final int ITERATION_COUNT_EXPONENT = 12;
    public static final int KEY_SIZE = 160;

    public static byte[] hashPassword(char[] password, byte[] salt) {
        return hashPassword(password, salt, ITERATION_COUNT_EXPONENT, KEY_SIZE);
    }
    
    public static byte[] hashPassword(char[] password, byte[] salt, int iterationCountExponent, int keySize) {
        try {
            PBEKeySpec spec = new PBEKeySpec(password, salt, 2 << iterationCountExponent, keySize);
            SecretKeyFactory factory = SecretKeyFactory.getInstance(ALGORITHM);
            return factory.generateSecret(spec).getEncoded();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    ...
}}}

where we use <a href="http://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/PBEKeySpec.html"><tt>PBEKeySpec</tt></a> and stuff.

Besides <tt>keySize</tt>, we specify the parameter <tt>iterationCountExponent</tt>, choosing a 2's exponent, because of Moore's Law, and because that's what Bcrypt does ;)

We will have to revise the defaults for these parameters in future, as computing power increases. 

Let's test that salting, hashing and matching actually works.
{{{
    @Test
    public void test() throws Exception {
        char[] password = "12345678".toCharArray();
        byte[] salt = PasswordSalts.nextSalt();
        byte[] hash = Passwords.hashPassword(password, salt);
        assertTrue(Passwords.matches(password, hash, salt));
        byte[] otherSaltBytes = Arrays.copyOf(salt, salt.length);
        otherSaltBytes[0] ^= otherSaltBytes[0];
        assertFalse(Passwords.matches(password, hash, otherSaltBytes));
        assertFalse(Passwords.matches("wrong".toCharArray(), hash, salt));
    }
}}}

where we use the following method to authenticate a supplied password, having retrieved the hash and salt from our database.

{{{
    public static boolean matches(char[] password, byte[] passwordHash, byte[] salt) {
        return matches(password, passwordHash, salt, ITERATION_COUNT_EXPONENT, KEY_SIZE);
    }
    
    public static boolean matches(char[] password, byte[] passwordHash, byte[] salt, int iterationCountExponent, int keySize) {
        return Arrays.equals(passwordHash, hashPassword(password, salt, iterationCountExponent, keySize));
    }
}}}

where we check if the supplied password matches our hash with related salt, using the provided PBKDF2 parameters.

<h4>Computational effort</h4>

According to https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet

<blockquote>
You should measure the time required and make sure that its as large as possible without providing a significantly noticeable delay when your users authenticate.
</blockquote>

Otherwise we should tweak the iteration count and key size.

So perhaps the time required to hash the password should be less than 100ms for consumer sites? I'm just guessing and don't really know so hopefully a reader can comment. In the case of secure admin sites, perhaps we are happier with it taking a bit longer.

{{{
    @Test
    public void testEffort() throws Exception {
        String password = "12345678";
        long startMillis = System.currentTimeMillis();
        byte[] saltBytes = Passwords.nextSalt();
        Passwords.hashPassword(password, saltBytes);
        System.out.println("time " + Millis.elapsed(startMillis));
        if (Millis.elapsed(startMillis) < 10) {
            System.out.println("Ooooooo.... i'm not sure");
        } else if (Millis.elapsed(startMillis) > 500) {
            System.out.println("Ooooooo.... i don't know");
        }
    }
}}}

Given that CPU power is increasing every year, we need the dynamic solution where we can revise the parameters :)

<h4>Parameter packing</h4>

Since we have to revise the algorithm parameters as computing power increases, we need to store these parameters, together with the salt, and the password hash, for each user! D'oh! That's a lot of extra columns!

So let's try to migrate to salty passwords without changing our database schema i.e. adding a new column for the salt etc.

We will take a page of Bcrypt's book, and embed the password hash, salt and parameters into one field.

{{{
public class PasswordHash {
    private static final byte version = 0x00;
    int iterationCountExponent;
    int keySize;
    byte[] salt;
    byte[] hash;

    public PasswordHash(byte[] hash, byte[] salt, int iterationCountExponent, int keySize) {
        this.hash = hash;
        this.salt = salt;
        this.iterationCountExponent = iterationCountExponent;
        this.keySize = keySize;
    }
    ...
}}}

In this case we generate the salt when hashing the password, and pack it into the password. 

{{{
    public PasswordHash(char[] password, int iterationCountExponent, int keySize) {
        this.iterationCountExponent = iterationCountExponent;
        this.keySize = keySize;
        this.salt = PasswordSalts.nextSalt();
        this.hash = Passwords.hashPassword(password, salt, iterationCountExponent, keySize);
    }

    public byte[] pack() {
        try {
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            stream.write(version);
            stream.write(salt.length + hash.length + 6);
            stream.write(hash.length);
            stream.write(salt.length);
            stream.write(iterationCountExponent);
            stream.write(keySize/16);
            stream.write(hash);
            stream.write(salt);
            return stream.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }       
}}}

When authenticating the password, we unpack the parameters, salt and hash from our single <tt>passwordHash</tt> field.
 
{{{       
    public PasswordHash(byte[] packedBytes) throws IOException {
        ByteArrayInputStream stream = new ByteArrayInputStream(packedBytes);
        if (stream.read() != version || stream.read() != packedBytes.length) {
            throw new IOException();
        }
        hash = new byte[stream.read()];
        salt = new byte[stream.read()];
        iterationCountExponent = stream.read();
        keySize = 16*stream.read();
        stream.read(hash);
        stream.read(salt);
    }

    public boolean matches(char[] password) {
        return Arrays.equals(hash, Passwords.hashPassword(password, salt, iterationCountExponent, keySize));
    }
}}}

{{{
    @Test
    public void testPasswordHash() throws Exception {
        char[] password = "12345678".toCharArray();
        PasswordHash passwordHash = new PasswordHash(password, 
                Passwords.ITERATION_COUNT_EXPONENT, Passwords.KEY_SIZE);
        byte[] hashBytes = passwordHash.pack();
        String hashString = Base64.encode(hashBytes);
        System.out.printf("%s\n", hashString);
        System.out.printf("byte array length %d, encoded length %d\n", 
                hashBytes.length, hashString.length());
        assertTrue(PasswordHash.isPacked(hashBytes));
        assertTrue(passwordHash.matches(password));
        assertFalse(passwordHash.matches("wrong".toCharArray()));
        assertTrue(new PasswordHash(passwordHash.pack()).matches(password));
        assertFalse(new PasswordHash(passwordHash.pack()).matches("wrong".toCharArray()));
    }
}}}

{{{
KRQQDArXK6YWipsS/XLnTTc2PS9/W94ml8Pe4ny/Dy7bkk1p7NpgD4s=
byte array length 41, encoded length 56
}}}

We can check the bytes to confirm that the contents are consistent.

{{{
    public static boolean isPacked(byte[] packedBytes) {        
        ByteArrayInputStream stream = new ByteArrayInputStream(packedBytes);
        int length = stream.read();
        int hashLength = stream.read();
        int saltLength = stream.read();
        if (packedBytes.length != length || length != hashLength + saltLength + 5) {
            return false;
        }
        return true;
    }

}}}

Finally our app might use a method as follows to migrate to salty passwords.

{{{
    public boolean matches(String user, char[] password, byte[] packedBytes) throws Exception {
        if (PasswordHash.isPacked(packedBytes)) {
            PasswordHash passwordHash = new PasswordHash(packedBytes);
            if (passwordHash.matches(password)) {
                if (passwordHash.getIterationCountExponent() != Passwords.ITERATION_COUNT_EXPONENT ||
                        passwordHash.getKeySize() != Passwords.KEY_SIZE) {
                    packedBytes = PackedPasswords.hashPassword(password);
                    persistRevisedPasswordHash(user, packedBytes);
                }
                return true;
            }
            return false;
        }
        if (matchesUnsalted(password, packedBytes)) {
            packedBytes = PackedPasswords.hashPassword(password);
            persistRevisedPasswordHash(user, packedBytes);
            return true;
        }
        return false;
    }
}}}

where if the password is correct, but still a legacy unsalted hash, or not at the latest revision, we take the opportunity of migrating that user's password hash to the latest salty non-cracker.

<h4>Furthermore</h4>

According to https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet

<blockquote>
An additional password storage defense mechanism involves storing the salt in a different location than the password hash. Use of the server's filesystem is one commonly used mechanism for salt isolation, assuming the password hashes are stored in different location such as a database.
</blockquote>

So i guess the salt could be encrypted in the database, and this key loaded from a keystore by our application, i.e. off the filesystem. Our app uses this key to decrypt the salts retrieved from the database. In this case, both our database and filesystem needs to be compromised, and password data and keystore both be stolen, to effect password theft.

Alternatively, using our packed <tt>PasswordHash</tt>, we could encrypt that in that database. This to confuse things, let's use a password for this encryption!

{{{
public class PBECipher {
    private final int iterationCount = 2<<16;
    private final int keySize = 256;
    private byte[] salt = Base64.decode("nD++3Wv9h9MqnS3bO3KJzA==");
    
    public PBECipher() {
    }
    
    public Cipher createCipher(int mode, char[] password) throws Exception {
        PBEKeySpec spec = new PBEKeySpec(password, salt, iterationCount, keySize);
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        SecretKey secret = factory.generateSecret(spec);
        SecretKey aesSecret = new SecretKeySpec(secret.getEncoded(), "AES");
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(mode, aesSecret);        
        return cipher;
    }    
}
}}}

where we have chosen a salt and hard-coded it into our source code. 

{{{
    @Test
    public void testSaltEncoding() throws Exception {
        byte[] saltBytes = PasswordSalts.nextSalt();
        String encodedSalt = Base64.encode(saltBytes);
        System.out.println(encodedSalt);
    }
}}}

{{{
nD++3Wv9h9MqnS3bO3KJzA==
}}}

So we have salt hard-coded in our source code, for a password which is specified as an application parameter on the filesystem, for the encryption of our logins' salted and hashed passwords in the database!

<h4>Conclusion</h4>

Passwords should never be seen or stored in clear text, or in any reversible fashion. 

Since the passwords that people manage to come up with are, urm, far from random, we add salt, to protect against rainbow attacks and what-not.

We present an implementation using <tt>PBKDF2WithHmacSHA1</tt>, which seems to be quite common according to some googling. We cater for multiple revisions, typically to increase the number of iterations and key size, and illustrate how hashes might be migrated on the fly to the latest revision.

After all this effort that seems to be required, the quickest approach is probably just to use Scrypt?!

Please comment, not least because security is soooo important, and i'm sure i've made some errors and omissions, and wouldn't want to mislead any readers, as i've done so often before - sorry about that!

<h4>Resources</h4>

https://code.google.com/p/vellum/ - where i will collate these articles and their code - e.g. see <a href="http://code.google.com/p/vellum/source/browse/trunk/src/vellum/util/Passwords.java"><tt>Passwords</tt></a>.

