#labels SSL, keytool, Java

<h4>Overview</h4>

We consider innumerable clients connecting to a Java server over SSL sockets. 

Naturally, we generate certificates for each client, and can import these self-signed certificates into our server truststore.

In this article, we sign the client certificates using our server certificate, which is then our local CA root certificate, and as such our server must support certificate revocation.

<h4>SSLContexts</h4>

Ordinarily we create an <tt>SSLContext</tt> as follows.
{{{
public class SSLContexts {
    ...
    public static SSLContext create(KeyStore keyStore, char[] keyPassword,
            KeyStore trustStore) throws Exception {
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("SunX509");
        keyManagerFactory.init(keyStore, keyPassword);
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("SunX509");
        trustManagerFactory.init(trustStore);
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagerFactory.getKeyManagers(),
                trustManagerFactory.getTrustManagers(), new SecureRandom());
        return sslContext;
    }
}
}}}
Let's support local certificate revocation by means of a list of revoked CNs.
{{{
public class RevocableSSLContexts {
    ...
    public static SSLContext create(KeyStore keyStore, char[] keyPass,
            KeyStore trustStore, List<String> revokedCNList) throws Exception {
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("SunX509");
        keyManagerFactory.init(keyStore, keyPass);
        SSLContext sslContext = SSLContext.getInstance("TLS");
        TrustManager revocableTrustManager = new RevocableClientTrustManager(
                getPrivateKeyCertificate(keyStore),
                getX509TrustManager(trustStore),
                revokedCNList);
        sslContext.init(keyManagerFactory.getKeyManagers(),
                new TrustManager[]{revocableTrustManager},
                new SecureRandom());
        return sslContext;
    }
}
}}}
where we initialise a custom <tt>!RevocableClientTrustManager</tt> with our server cert, and a collection of revoked certificates' CNs.
{{{
public class RevocableClientTrustManager implements X509TrustManager {
    X509Certificate serverCertificate;
    X509TrustManager delegate;
    Collection<String> revokedCNList;
    ...
    @Override
    public void checkClientTrusted(X509Certificate[] certs, String authType) 
            throws CertificateException {
        if (!certs[0].getSubjectX500Principal().equals(
                serverCertificate.getSubjectX500Principal())) {
            throw new CertificateException("Server cert used as client cert");
        }
        if (!certs[0].getIssuerX500Principal().equals(
                serverCertificate.getSubjectX500Principal())) {
            throw new CertificateException("Untrusted issuer");
        }
        if (!Arrays.equals(certs[1].getPublicKey().getEncoded(),
                serverCertificate.getPublicKey().getEncoded())) {
            throw new CertificateException("Invalid server certificate");
        }
        if (revokedCNList.contains(getCN(certs[0].getSubjectDN()))) {
            throw new CertificateException("Certificate CN revoked");
        }
        delegate.checkClientTrusted(certs, authType);
    }
}
}}}
where we check that the client certificate is signed by our server certificate, and not revoked. Finally, we delegate to the standard <tt>!X509TrustManager</tt> for good measure.

Notice that we do not accept the server cert as a client cert. This is a precaution in case our server keystore has been compromised, and a rogue is using it to connect to our server.

The collection of revoked certificates' identifiers might be read from a file or a database. This could be a synchronized list that is updated externally on the fly, and so enables a dynamic truststore.
{{{
        revokedCNList = Collections.synchronizedList(readRevocationList(crlFile));
        SSLContext sslContext = create(keyStore, pass, trustStore, revokedCNList);
        SSLServerSocket serverSocket = (SSLServerSocket) sslContext.
                getServerSocketFactory().createServerSocket(port);
}}}

<h4>Certificate serial numbers</h4>

We see that <a href="http://www.docjar.com/html/api/sun/security/tools/KeyTool.java.html"><tt>!KeyTool.java</tt></a>, as used by the <tt>keytool</tt> command-line utility, generates a random serial number as follows.
{{{
        info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(
            new java.util.Random().nextInt() & 0x7fffffff));
}}}
In a later article, we might build a local CA management tool, which might use a sequence number for client certs which it generates programmatically and records them into an SQL database. In this case, we might revoke certificates by their serial numbers, and so our trust manager would reject them as follows.
{{{
public class RevocableClientTrustManager implements X509TrustManager {
    X509Certificate serverCertificate;
    X509TrustManager delegate;
    Collection<BigInteger> revokedSerialNumberList;
    ...
    @Override
    public void checkClientTrusted(X509Certificate[] certs, String authType) 
            throws CertificateException {
        ...
        if (revokedSerialNumberList.contains(certs[0].getSerialNumber())) {
            throw new CertificateException("Certificate serial number revoked");
        }
        delegate.checkClientTrusted(certs, authType);
    }
}
}}}
where <tt><a href="http://www.docjar.org/html/api/java/security/cert/X509Certificate.java.html">!X509Certificate</a>.getSerialNumber()</tt> returns a <tt>!BigInteger</tt> for the serial number. Incidently, this is implemented by <a href="http://www.docjar.org/html/api/sun/security/x509/X509CertImpl.java.html"><tt>!X509CertImpl.java</tt></a>.


<h4>Certificate chain</h4>

Naturally a <tt>SSLServerSocket</tt> is created using the <tt>SSLContext</tt> which is configured via a keystore and a truststore.

{{{
$ keytool -keystore server.jks -alias server -list -v
Certificate chain length: 2
Certificate[1]:
Owner:  CN=server, OU=test
Issuer: CN=ca, OU=test
Certificate[2]:
Owner:  CN=ca, OU=test
Issuer: CN=ca, OU=test

$ keytool -keystore server.trust.jks -list 
Your keystore contains 1 entry
server, trustedCertEntry
}}}
where our server cert is signed by a local CA, which is by definition the self-signed root of its cert chain.

We can use <tt>openssl</tt> to connect to the <tt>SSLServerSocket</tt> and inspect its key certificate chain as follows.
{{{
$ openssl s_client -connect localhost:4446

Certificate chain
 0 s:/OU=test/CN=server
   i:/OU=test/CN=ca
 1 s:/OU=test/CN=ca
   i:/OU=test/CN=ca
}}}

This demonstrates why the keystore requires a certificate chain, i.e. to advise the client thereof during the SSL handshake.


<h4><tt>keytool</tt></h4>

Naturally we use <tt>keytool</tt> to create our keystores and truststores. For example, we create a private SSL keystore for a client, say evanx, as follows.
{{{
$ keytool -keystore evanx.jks -genkeypair -keyalg rsa -keysize 2048 -validity 365 -alias evanx \
    -dname "CN=evanx, OU=test"
}}}
We export our certificate as follows.
{{{
$ keytool -keystore evanx.jks -alias evanx -exportcert -rfc
}}}
We cut and paste the exported PEM text into a file, which we can inspect using <tt>openssl</tt> as follows.
{{{
$ openssl x509 -text -in evanx.pem
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1380030508 (0x5241982c)
    Signature Algorithm: sha1WithRSAEncryption
        Issuer: CN=evanx, OU=test
        Validity
            Not Before: Sep 24 13:48:28 2013 GMT
            Not After : Sep 24 13:48:28 2014 GMT
        Subject: CN=evanx, OU=test
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
}}}
We import the cert into the server SSL truststore.
{{{
$ keytool -keystore server.trust.jks -alias evanx -importcert -file evanx.pem
}}}
Similarly, the server cert is imported into the clients' truststores.

Incidently, in a sequel article we will create keystores programmatically for our unit tests, by taking cues from <tt>!KeyTool.java</tt> and emulating the above procedure.

<h4>Client certificate signing</h4>

Alternatively, we could export a CSR, and sign this with the server cert. In this case our server is a local CA, which must support certificate revocation e.g. using <tt>!RecovableClientTrustManager</tt>.
{{{
$ keytool -keystore evanx.jks -alias evanx -certreq
}}}
We use Java7's keytool to sign the CSR, using its new <tt>-gencert</tt> option, which is not available in earlier JRE's.
{{{
$ keytool -keystore server.jks -gencert -validity 365 -rfc \
    -dname "CN=evanx, OU=test" -infile evanx.csr -outfile evanx.signed.pem
}}}

We inspect the cert using <tt>openssl</tt>.
{{{
$ openssl x509 -text -in evanx.signed.pem | grep CN
        Issuer: CN=server, OU=test
        Subject: CN=evanx, OU=test
}}}

Since the keystore requires its key certificate chain to be imported in the correct order starting with the root cert, we import the server cert first, and then our signed cert.
{{{
$ keytool -keystore evanx.jks -importcert -noprompt \
    -file server.pem -alias server 
Enter keystore password: 
Certificate was added to keystore

$ keytool -keystore evanx.jks -importcert -noprompt \
    -file evanx.signed.pem -alias evanx
Enter keystore password: 
Certificate reply was installed in keystore
}}}

In this case, our client keystore can double up as our truststore since it happens to contain the server cert by virtue of its certificate chain, and naturally it must trust the server to which it wishes to connect. If the client cert is CA-signed, we must not use its keystore as its truststore, otherwise it would trust any server with a cert signed by that CA, since the CA certificate must be in the keystore as the root of the key certificate chain.

<img align="right" style="margin-left: 4px" src="http://jroller.com/evanx/resource/gnome-keys-250.png" />

Our server keystore can also double up as its truststore in this particular case, since naturally it contains the self-signed server cert together with its private key, and our client certs' CA cert is this sole server cert.

If our server cert is CA-signed, then since the keystore must include its key certificate chain, it will include the CA root cert. Therefore if the keystore is misused as the trustore, then the server would trust <i>any</i> client cert signed by that CA.

<h4>Client certificate management</h4>

Clearly a certificate with a duplicate CN, impersonates the original certificate with that CN. So when issuing a client certificate, we must take care to ensure the uniqueness of the CN, and add the certificate, or at least its unique identifier, to a registry of some sort. 

If a certificate is signed but not recorded, or its record is deleted, our server is forever vulnerable to that rogue certificate. In order to review access, we require a perfect record of all issued certificates. We might record our signed certs into a keystore file as follows.
{{{
$ keytool -keystore server.issued.jks -importcert -alias evanx -file evanx.pem 
Certificate was added to keystore
}}}
where this is not a truststore per se, but just a database of issued certificates. 

Interestingly, in trying to avoid a truststore containing all our client certificates, we have nevertheless ended up with one! 

<h4>Self-signed client certificates</h4>

All told, given the risk of a rogue certificate, we recommend using self-signed client certificates whenever possible, where these are explicitly imported into our server truststore, which can be reviewed. Any issued certificate which goes unrecorded, or is given a duplicate identifier, by mistake or on purpose, should be considered to be a rogue certificate, that has access under the radar.

Note that when using self-signed client certs (or CA-signed server certs), the server keystore must not be used as its truststore, since the keystore naturally contains the server certificate, and so a rogue certificate can be created by signing it with the server key, e.g. using <tt>keytool -gencert</tt>, as illustrated above. 

<img align="right" src="http://jroller.com/evanx/resource/Gnome-application-certificate-250-crop.png">

Similarly, when using CA-signed server certs, the server keystore contains the CA root key, and so must not be used as the truststore. Otherwise any client cert signed by that CA would trusted, rather than just the client certs we have specifically added to the truststore.


<h4>Conclusion</h4>

We can sign client certificates using our server certificate, which is then our local CA root certificate. As such we should support certification revocation. So we introduce a custom <tt>!RevocableClientTrustManager</tt> to support a simple local revocation list of CNs. Naturally, this is only useful is if we can configure our server to use it.

In this special case, we can use our keystore as our truststore, which is a practice that ordinarily should be prohibited, as argued above.

Given the risk of a rogue certificate, actually we recommend using self-signed client certificates whenever possible, rather than the local CA presented here.

<h4>Furthermore</h4>

We'll perform unit testing of <tt>!RevocableClientTrustManager</tt> in a follow-up article. Thereafter, we might implement a local CA management tool that records issued certificates, a local CA server supporting standard CRLs, and perhaps even a web-based admin tool for those goodies.

<h4>Other crypto</h4>

Also relating to Java crypto in this blog, see <a href="https://weblogs.java.net/blog/evanx/archive/2013/01/24/password-salt">Password Salt</a> for secure passwords, and using the <a href="https://weblogs.java.net/blog/evanx/archive/2012/11/07/google-authenticator-thus-enabled">Google Authenticator</a> mobile app for multi-factor authentication for your own website.
