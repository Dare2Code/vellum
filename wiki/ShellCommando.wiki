
This article is part of the [BinBash Bin Bash] series :) 

== Introduction == 

We write lots of cron scripts to perform routine maintenance tasks on our systems, so... 

We might want a script to perform various tasks in succession, but able to invoke those individually e.g. to test them.

== Template == 

The following is a basic template.

{{{
set -o nounset

command1_df() { # partition
  partition=$1
  df -h | grep $1
}

command0_help() {
  echo "The following commands are available:" 
  cat $0 | grep '^command[0-9]_' | sed 's/^command\([0-9]\)_\(.*\)() { # \(.*\)/\2: \1 args: \3/'
}

command0_default() {
  echo "Sorry but the default invocation of this script has no functionality yet."
  command0_help
}

invoke() {
  if [ $# -gt 0 ]
  then
    command=$1
    shift
  else
    command=default
  fi
  command$#_$command $@
}

invoke $@
}}}

Firstly, we always set the bash option <tt>nounset</tt> so that if our script encounters an unset variable, this is treated as an inherently unsafe bug, and the script will abort.

We implement custom commands in the script as per the <tt>command1_df()</tt> example, using a specific naming convention as invoked by <tt>invoke()</tt>.

If no command-line arguments are provided, we will invoke the method <tt>command0_default()</tt>.

==== Help ====

The above implementation of <tt>command0_help()</tt> lists all the methods at our command, where we document the expected arguments in the script itself via a comment next to the method declaration. 

<pre>
evanx@beethoven:~$ sh scripts/test.sh
Sorry but the default invocation of this script has no functionality yet.
The following commands are available:
df: 1 args: partition
</pre>

where <tt>command0_help()</tt> will parse the script for command methods, and print any comments regarding their usage. 

==== Invocation ====

We invoke the <tt>command1_df()</tt> with one argument, namely is the partition. 

<code language="xml">
evanx@beethoven:~$ sh scripts/test.sh df home
/dev/sdb2             128G  109G   13G  90% /home
</code>

We see in our implementation of <tt>command1_df()</tt> that this argument is just a pattern we grep from the output of <tt>df</tt>. 

If we do not provide the correct number of arguments that the method is expecting, the script will abort as follows. 

{{{
evanx@beethoven:~$ sh scripts/test.sh df 
scripts/test.sh: 25: command0_df: not found
}}}

where the intentioned method is actually prefixed by <tt>command1</tt> since it requires 1 argument.

If we provide an invalid command, the script will abort as follows, courtesy of the <tt>nounset</tt>. 

{{{
evans@beethoven:~$ sh scripts/test.sh dff home
scripts/test.sh: 25: command1_dff: not found
}}}

=== Example ===

As an example, let's implement a new command to print yesterday's date in our preferred format. 

{{{
command0_yesterday() { # print yesterday's date in YYYY-MM-DD format
  date -d 'yesterday' +'%Y-%m-%d'
}
}}}

Let's check the usage. 

<pre>
evans@beethoven:~$ sh scripts/test.sh help
The following commands are available:
df: 1 args: partition
yesterday: 0 args: print yesterday's date in YYYY-MM-DD format
</pre>

And let's invoke it. 

<pre>
evans@beethoven:~$ sh scripts/test.sh yesterday
2013-04-26
</pre>

== Conclusion == 

We introduce a template for a convenient menu-esque approach to invoking methods in a bash script.

The implementation will ensure that <tt>command</tt> methods are invoked with the correct number of arguments, by virtue of the using the number of arguments in the method name itself e.g. <tt>command1</tt> will prefix methods requiring one argument only.

=== Resources === 

See the [BinBash Bin Bash] page. 


