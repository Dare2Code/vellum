

An SSL certificate is a digitally-signed document that for starters contains two bits of info, namely

1. an identity's info (e.g CN=ipay.co.za etc)

2. this identity's public key

This document is then digitally signed by a CA, using their private key. That is, a digital signature is appended to the document.

If self-signed, it means it is signed using the server's own private key.

Now to delve into the technical how-to...

First understand that "public key cryptography" is where data encrypted with the public key can only be decrypted using the corresponding private key; and data encrypted with the private key can only be decrypted using the corresponding public key.

The application of this public key cryptography is as follows.

1. A private key is used to sign, and decrypt.

2. The public key is used to verify, and encrypt.

where to "sign" means to encrypt a hash (e.g. MD5 or SHA) of a message or document, using one's private key.

So, anyone and everyone with the public key, can:

1. verify a digital signature produced by the private key holder.

2. send data securely to the private key holder.

The first step in creating a cert, is generating the private/public key pair. We use "keytool -genkey" to create a keystore with a private/public key pair.

We then produce a CSR using "keytool -certreq" and providing identity info such as CN=ipay.co.za etc.

This CSR includes the unsigned cert document with our identity info (CN etc), plus our public key.

The CA signs this document and sends it back to us. They have added a digital signature, which is the hash of the document encrypted using their private key.

This is our CA-signed cert (with identity info, public key, and now digital signature as well), which we import into our keystore using "keytool -importcert."

Now when a browser hits our site, it...

1. reads the cert presented by the server
2. checks that the URL entered by the user to hit this server matches the server's cert eg. "www.ipay.co.za"
3. verifies the server cert, using the CA's public key, from its CA cert database
4. can encrypt data using the server's public key (as contained in the cert) e.g. to establish SSL connection, knowing that only the server can decrypt this, as it requires the corresponding private key. (I believe it uses this to provide a shared secret session key for symmetric encryption of messages.)

Now consider the case of an SSL connection that is not between a browser and a website, e.g. an SSL connection between ASM and CSM, or between a POS and an ASM. In this case, the URL check is not performed because that is browser specific.

The client still verifies the server cert using it's "CA cert" database, aka "truststore" (as Java SSL calls it) or "remote keystore" (as we call it in BizSwitch). For self-signed certs, the CA cert database might contain only the server cert itself. The server is its own certificate authority :)

If "client auth" is enabled, then the server will request the connecting client's cert, and verify this against it's trusted "CA" certs. Sometimes we load the individual POS certs as trusted "CA" certs e.g. in "remote" keystore (which is called "truststore" in Java SSL itself), which is fine and well, but that is another story.

--

the above from reading, http://security.stackexchange.com/questions/12103/explanation-of-ssl-handshake-with-certificate

as per http://tools.ietf.org/html/rfc4346#appendix-B

"public key cryptography: A class of cryptographic techniques employing two-key ciphers. Messages encrypted with the public key can only be decrypted with the associated private key. Conversely, messages signed with the private key can be verified with the public key."

--

http://en.wikipedia.org/wiki/Public_key_certificate

In cryptography, a public key certificate (also known as a digital certificate or identity certificate) is an electronic document that uses a digital signature to bind a public key with an identity â€” information such as the name of a person or an organization, their address, and so forth. The certificate can be used to verify that a public key belongs to an individual.
--


http://publib.boulder.ibm.com/infocenter/tivihelp/v5r1/topic/com.ibm.itim_a.infocenter.doc/ins_ldp_4602.htm#ToC_45

Public key encryption requires that a public key and a private key be generated for an application. Data encrypted with the public key can only be decrypted using the corresponding private key. Data encrypted with the private key can only be decrypted using the corresponding public key.


