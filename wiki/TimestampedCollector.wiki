

{{{
public class TimestampedCollector<T extends Timestamped>  {
    long capacityMillis;
    long lastTimestamp;
    LinkedList<T> linkedList = new LinkedList();
    
    public TimestampedCollector(long capacityMillis) {
        this.capacityMillis = capacityMillis;
    }
    
    public synchronized void addLast(T element) {
        if (element.getTimestamp() == 0 || element.getTimestamp() < lastTimestamp) {
            throw new IllegalArgumentException();
        }
        lastTimestamp = element.getTimestamp();
        prune(lastTimestamp);
        linkedList.addLast(element);
    }

    public synchronized Deque<T> newDeque(long lastTimestamp) {
        prune(lastTimestamp);
        return new ArrayDeque(linkedList);
    }

    public synchronized Deque<T> tailDeque(int capacity) {
        if (linkedList.size() <= capacity) {
            return new ArrayDeque(linkedList);
        } else {
            return new ArrayDeque(linkedList.subList(linkedList.size() - capacity, linkedList.size()));
        }
    }    
    
    private void prune(long latestTimestamp) {
        while (linkedList.size() > 0 && 
                linkedList.getFirst().getTimestamp() < latestTimestamp - capacityMillis) {
            linkedList.removeFirst();
        }
    }
}
}}}

{{{
public class TimestampedCollectorTest implements Runnable {
    long capacityMillis = 30;
    long scheduledInterval = 10;
    long scheduledDelay = 0;
    final TimestampedCollector<TimestampedElement> collector = new TimestampedCollector(capacityMillis);
    ScheduledFuture future = Executors.newScheduledThreadPool(1).scheduleAtFixedRate(
            this, scheduledDelay, scheduledInterval, TimeUnit.MILLISECONDS);
    boolean verbose = false;
            
    @Override
    public void run() {
        long timestamp = System.currentTimeMillis();
        String value = "record at " + timestamp;
        collector.addLast(new TimestampedElement(value, timestamp));
        if (verbose) {
            System.out.println(value);
        }
    }
    
    @Test
    public void test() throws Exception {
        long millis = System.currentTimeMillis();
        check();
        check();
        future.cancel(true);
        Assert.assertTrue(collector.tailDeque(1).size() <= 1);
        for (TimestampedElement t  : collector.tailDeque(3)) {
            System.out.println(t.getElement());
            Assert.assertTrue(t.getTimestamp() > millis);
            millis = t.getTimestamp();
        }
        
    }
    
    private void check() throws Exception {
        long startMillis = System.currentTimeMillis();
        verbose = true;
        Thread.sleep(capacityMillis);
        verbose = false;
        Deque<TimestampedElement> deque = collector.newDeque(startMillis + capacityMillis);
        SortedSet<Timestamped> set = new TreeSet(new TimestampedComparator());
        set.addAll(deque);
        System.out.println("size " + deque.size());
        System.out.println("startMillis " + startMillis);
        System.out.println("first " + set.first().getTimestamp());
        System.out.println("last " + set.last().getTimestamp());
        System.out.println("capacity " + (capacityMillis/scheduledInterval));
        Assert.assertEquals("first", deque.getFirst().getTimestamp(), set.first().getTimestamp());
        Assert.assertEquals("last", deque.getLast().getTimestamp(), set.last().getTimestamp());
        Assert.assertTrue("first", set.first().getTimestamp() >= startMillis);
        Assert.assertTrue("last time" , 
                set.last().getTimestamp() >= startMillis + capacityMillis - scheduledInterval);
        Assert.assertTrue("capacityMillis", 
                set.last().getTimestamp() - set.first().getTimestamp() <= capacityMillis);
    }    
}
}}}

<pre>
record at 1340146100550
record at 1340146100560
record at 1340146100570
size 3
startMillis 1340146100545
first 1340146100550
last 1340146100570
capacity 3
record at 1340146100580
record at 1340146100590
record at 1340146100600
size 3
startMillis 1340146100577
first 1340146100580
last 1340146100600
capacity 3
record at 1340146100580
record at 1340146100590
record at 1340146100600
</pre>