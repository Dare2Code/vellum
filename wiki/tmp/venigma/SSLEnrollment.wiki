
the client (which could be a device that is deployed in the field), is configured with SSL enrollment URL eg. venigmacode.com and enroll as follows

<code language="xml">
curl https://enroll.venigmacode.com/GenerateKey" -d "CN=<clientId>, C=ZA, O=ACME, etc" -o mykey.pem
curl https://enroll.venigmacode.com/GetCert" -o mycert.pem 
</code>

so the above generates a private key and signs it with the server key - alternatively one can generate private key and send a CSR as follows - more secure for paranoid but less convenient:

<code language="xml">
cat my.csr | curl https://enroll.venigmacode.com/Sign" -o mycert.pem 
</code>

now the above enroll.secure.net is not client auth SSL, but now that we have a signed cert, the client can connect to the "secure server" using their key ie. client side cert required ie. client auth enabled https 

<code language="xml">
curl https://secure.venigmacode.com/Post" --key mykey.pem --cert mycert.pem -d 'data to post to server' 
</code>

so now the client is communicating securely!

the trick is that the client cert needs to be enabled on the secure server of course - which is done via website by responsible affected parties 
while the cert is signed by the server, the server uses a dynamic trust store which checks the cert in the database to see if it is enabled, post enrollment, by said parties

i have prototyped this  - actually by checking code of keytool from java7 - which does more than the ol' keytool from java6

my application for cloud monitoring service of servers - where need an easy way to set to secure comms for servers to submit cron output to a server in the cloud which then monitors said output, and sends appropriate alerts etc, so one knows nightly backups  are working or not, or custom checks run from the cron every minute 

makes it easy for system admin to set up secure customer monitoring just using cron scripts - which usually email output to sys admin - but i replace the MTA which a wrapper script that submits the cron output via secure SSL to central server, which can store/filter/monitor/alert as appropriate

but i'm thinking the tool for secure SSL enrollment might be generally useful for other applications 

problem at the moment is that client-auth SSL is underutilised, not least as its a bit of a pain to set up and manage

so our app can make enrollment easy, and management of client certs - eg. enabled them, revoke them 

another problem with SSL is that an HTTPS server has client auth either on or off - usually off - but when on, the SSL certs have to setup first (keys generated, CSR submitted for signing, etc) - so we automate that on an enrollment server (on HTTPS port but client auth off) and then following enrollment (using trivial https request as above) and confirmation/enablement (via website), the main operational server (also HTTPS, but client auth enabled) will accept said client with auth turned on
